# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "**" ]

jobs:
  build-project:
    name: Build Project
    runs-on: ubuntu-latest
    
    # [수정] 5번 단계가 삭제되었으므로 permissions 설정도 함께 삭제합니다.

    steps:
      # --- 1. 코드 체크아웃 ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 2. JDK 17 설정 ---
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      # [삭제] 디버깅 단계가 더 이상 필요하지 않으므로 삭제합니다.

      # --- 3. Maven으로 빌드 및 테스트 ---
      - name: Build with Maven
        working-directory: shoppingMall-master/shoppingMall-master
        run: |
          chmod +x mvnw
          ./mvnw verify

      # --- 4. Docker 이미지 빌드 및 푸시 (main 또는 master 브랜치만) ---
      - name: Build and Publish Docker Image
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
        working-directory: shoppingMall-master/shoppingMall-master
        run: |
          ./mvnw clean package -DskipTests=true
          
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          
          docker build -t myimage:latest .
          
          docker tag myimage:latest ${{ secrets.DOCKER_USERNAME }}/shoppingmall-api:latest
          
          docker push ${{ secrets.DOCKER_USERNAME }}/shoppingmall-api:latest
        
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled

      # --- 5. [삭제] ---
      # 오류를 일으키는 (선택) 사항인 의존성 그래프 업데이트 단계를 제거합니다.

