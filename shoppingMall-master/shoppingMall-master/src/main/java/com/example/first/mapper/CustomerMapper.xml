<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.first.mapper.CustomerMapper">
	
	
	
	

	<!-- 하상우) 관리자에서 회원 상세 정보 조회 -->
	
	<select id="getCustomerMail" parameterType="String" resultType="com.example.first.vo.Customer">
	
		SELECT
			customer_mail customerMail,
		    customer_pw customerPw,
		    customer_birth customerBirth,
		    customer_gender customerGender,
		    update_date updateDate,
		    create_date createDate
		from customer
		WHERE customer_mail = #{customerMail}
	
	
	</select>
	
	
	
	<select id="getCustomerOne" parameterType="String" resultType="com.example.first.vo.Customer">
    SELECT
        a.address_no addressNo,
        c.customer_mail customerMail,
        a.address_detail addressDetail,
        a.update_date AS addressUpdateDate,
        a.create_date AS addressCreateDate,
        c.customer_pw customerPw,
        c.customer_birth customerBirth,
        c.customer_gender customerGender,
        c.update_date AS customerUpdateDate,
        c.create_date AS customerCreateDate
    FROM Address a
    RIGHT JOIN Customer c ON a.customer_mail = c.customer_mail
    WHERE c.customer_mail = #{customerMail}
    LIMIT 1; <!-- 여기서 LIMIT 1로 하나만 반환하도록 수정 -->
</select>
	
	<!-- 하상우) 관리자에서 회원 삭제 -->
	
	<delete id="removeCustomer" parameterType="com.example.first.vo.Customer">
		
		DELETE FROM
			customer
		WHERE customer_mail = #{customerMail};
	
	</delete>
	
	
	
	<!-- 하상우) 관리자에서 회원 리스트 조회 -->
	<select id="getCustomerList" parameterType="com.example.first.vo.Customer">
	
		SELECT
			customer_mail customerMail,
		    customer_pw customerPw,
		    customer_birth customerBirth,
		    customer_gender customerGender,
		    update_date updateDate,
		    create_date createDate
		from customer
	
	</select>
	
	
	<!-- /common/register -->
	<insert id="insertCustomer" parameterType="com.example.first.vo.Customer">
		INSERT INTO customer(
			customer_mail, customer_pw, customer_birth, customer_gender
			) VALUES (
			#{customerMail}, #{customerPw}, #{customerBirth},#{customerGender}
			)

	</insert>
	<!-- 
	INSERT INTO customer = customer라는 db안에 집어넣음
	(customer_mail, customer_pw, customer_birth, customer_gender) = customer라는 db안에 넣을 column 
		VALUES (#{},#{},#{},#{}) = 외부에서 입력받는 정보들 이 경우엔 CustomerMapper.java로 받은 정보(registerCustomer)가 들어감
	 -->
	
	<!-- /common/login -->
	<select id="login" parameterType="com.example.first.vo.Customer"
		resultType="com.example.first.vo.Customer">
		SELECT
		customer_mail customerMail
		FROM customer
		WHERE customer_mail = #{customerMail} AND
		customer_pw = #{customerPw}
	</select>
	
	<!-- customer -->
	<select id="selectCustomerOne" resultType="Map"
		parameterType="String">
		select
		customer_mail customerMail,
		customer_pw customerPw,
		customer_birth customerBirth,
		customer_gender customerGender
		from customer
		where customer_mail = #{customerMail}
	</select>
	
	<!-- customerUpdate -->
	<update id="updateCustomer" parameterType="com.example.first.vo.Customer">
		update customer
		set customer_pw =#{customerPw}
		where customer_mail = #{customerMail}
	</update>
</mapper>